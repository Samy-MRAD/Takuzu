trajet <- data.frame(jour = n, qualite = y)
while (n < N && y < s) {
n <- n + 1
y <- sample(0:n, 1)
trajet <- rbind(trajet, data.frame(jour = n, qualite = y))
}
# À la sortie de la boucle, on a vendangé (car y >= s ou n == N)
recompense <- y
# Retourne le trajet et la récompense
return(list(trajet = trajet, recompense = recompense))
}
res <- sim_pi2(5, 10)
res$trajet      # data.frame des états
res$recompense  # qualité finale
# Tracer plusieurs trajectoires pour une politique pi_2^s
tracer_traj_pi2 <- function(s, nb_traj = 5) {
df_list <- list()
for (i in 1:nb_traj) {
res <- sim_pi2(s)
traj <- res$trajet
traj$id <- i
df_list[[i]] <- traj
}
all_traj <- do.call(rbind, df_list)
ggplot(all_traj, aes(x = jour, y = qualite, group = id, color = factor(id))) +
geom_line() +
geom_point() +
labs(title = paste("Trajectoires sous pi2 avec s =", s),
x = "Jour", y = "Qualité",
color = "Trajectoire") +
theme_minimal()
}
tracer_traj_pi2(3)
tracer_traj_pi2(7)
monte_carlo_pi2 <- function(s, B = 1000) {
gains <- numeric(B)
for (i in 1:B) {
res <- sim_pi2(s)
gains[i] <- res$recompense
}
return(mean(gains))
}
res_monte_carlo_pi2 <- data.frame(
s = 0:10,
gain_moyen = sapply(0:10, monte_carlo_pi2)
)
print(res_monte_carlo_pi2)
ggplot(res_monte_carlo_pi2, aes(x = s, y = gain_moyen)) +
geom_line(color = "green") +
geom_point(color = "green") +
labs(title = "Gain moyen estimé en fonction de s (pi(2,s))",
x = "Seuil de vendange (s)",
y = "Gain moyen espéré") +
theme_minimal()
best_index <- which.max(res_monte_carlo_pi2$gain_moyen)
best_s <- res_monte_carlo_pi2$s[best_index]
best_gain <- res_monte_carlo_pi2$gain_moyen[best_index]
print(paste('Meilleur s =', best_s, 'avec un gain moyen de', round(best_gain, 3)))
res_monte_carlo_pi1$politique <- "pi1"
res_monte_carlo_pi2$politique <- "pi2"
colnames(res_monte_carlo_pi1)[1] <- "param"
colnames(res_monte_carlo_pi2)[1] <- "param"
res_comparatif <- rbind(res_monte_carlo_pi1, res_monte_carlo_pi2)
ggplot(res_comparatif, aes(x = param, y = gain_moyen, color = politique)) +
geom_line() +
geom_point() +
labs(title = "Comparaison des politiques pi1 et pi2",
x = "Paramètre (d ou s)",
y = "Gain moyen espéré",
color = "Politique") +
theme_minimal()
# Initialisation
N <- 10
V <- matrix(0, nrow = N+1, ncol = N+1)    # V[y+1, n+1]
pi_opt <- matrix(0, nrow = N+1, ncol = N+1)  # 1 si on vendange, 0 sinon
# Boucle de rétropropagation
for (n in N:0) {
for (y in 0:n) {
# Si on est au dernier jour, on est forcé de vendanger
if (n == N) {
V[y+1, n+1] <- y
pi_opt[y+1, n+1] <- 1
} else {
# Gain si on vendange maintenant
gain_vendange <- y
# Gain espéré si on attend : E[V(y', n+1)] avec y' suit Unif(0, n+1)
y_possibles <- 0:(n+1)
proba <- 1 / (n + 2)
gain_attente <- sum(V[y_possibles + 1, n + 2]) * proba
# Choix optimal
if (gain_vendange >= gain_attente) {
V[y+1, n+1] <- gain_vendange
pi_opt[y+1, n+1] <- 1
} else {
V[y+1, n+1] <- gain_attente
pi_opt[y+1, n+1] <- 0
}
}
}
}
V[1, 1]         # Valeur optimale attendue depuis l’état (0,0)
pi_opt[1, 1]    # 1 si on vendange tout de suite, 0 si on attend
valeur_opt_00 <- V[1, 1]  # y = 0, n = 0 donc indices y+1 = 1, n+1 = 1
print(valeur_opt_00)
meilleur_pi1 <- max(res_monte_carlo_pi1$gain_moyen)
meilleur_d <- res_monte_carlo_pi1$d[which.max(res_monte_carlo_pi1$gain_moyen)]
meilleur_pi2 <- max(res_monte_carlo_pi2$gain_moyen)
meilleur_s <- res_monte_carlo_pi2$s[which.max(res_monte_carlo_pi2$gain_moyen)]
cat("Valeur optimale (V(0,0)) =", valeur_opt_00, "\n")
cat("Meilleur pi1 : d =", meilleur_d, ", gain moyen =", meilleur_pi1, "\n")
cat("Meilleur pi2 : s =", meilleur_s, ", gain moyen =", meilleur_pi2, "\n")
# Fonction pour simuler une trajectoire sous la politique optimale
sim_opt <- function(N = 10) {
y <- 0
n <- 0
trajet <- data.frame(jour = n, qualite = y)
while (n < N && pi_opt[y+1, n+1] == 0) {
n <- n + 1
y <- sample(0:n, 1)
trajet <- rbind(trajet, data.frame(jour = n, qualite = y))
}
trajet <- rbind(trajet, data.frame(jour = "vendange (opt)", qualite = y))
return(trajet)
}
# Tracer quelques trajectoires optimales
plot_traj_opt <- function(nb = 5) {
traj_list <- list()
for (i in 1:nb) {
traj <- sim_opt()
traj$id <- i
traj_list[[i]] <- traj
}
all_traj <- do.call(rbind, traj_list)
all_traj$jour_num <- suppressWarnings(as.numeric(as.character(all_traj$jour)))
ggplot(all_traj[!is.na(all_traj$jour_num),], aes(x = jour_num, y = qualite, group = id, color = factor(id))) +
geom_line() +
geom_point() +
labs(title = "Trajectoires contrôlées optimalement",
x = "Jour", y = "Qualité", color = "Trajectoire") +
theme_minimal()
}
# Tracer
plot_traj_opt()
library(ggplot2)
library(reshape2)
# Convertir pi_opt en data frame pour ggplot
pi_df <- melt(pi_opt)
colnames(pi_df) <- c("y", "n", "action")
pi_df$action <- factor(pi_df$action, labels = c("attendre", "vendanger"))
ggplot(pi_df, aes(x = n - 1, y = y - 1, fill = action)) +
geom_tile(color = "white") +
scale_fill_manual(values = c("blue", "red")) +
labs(title = "Politique optimale pi* (0 = attendre, 1 = vendanger)",
x = "Jour n", y = "Qualité y",
fill = "Action") +
theme_minimal()
simuler_trajectoire_opt <- function(pi_opt, N = 10) {
y <- 0
n <- 0
trajet <- data.frame(jour = n, qualite = y)
while (n < N && pi_opt[y + 1, n + 1] == 0) {
n <- n + 1
y <- sample(0:n, 1)  # Discret comme tes autres simus
trajet <- rbind(trajet, data.frame(jour = n, qualite = y))
}
return(trajet)
}
tracer_traj_opt <- function(nb = 5) {
df_list <- list()
for (i in 1:nb) {
traj <- simuler_trajectoire_opt(pi_opt)
traj$id <- i
df_list[[i]] <- traj
}
all_traj <- do.call(rbind, df_list)
ggplot(all_traj, aes(x = jour, y = qualite, group = id, color = factor(id))) +
geom_line() + geom_point() +
labs(title = "Trajectoires sous la politique optimale pi*",
x = "Jour", y = "Qualité", color = "Trajectoire") +
theme_minimal()
}
tracer_traj_opt()
# 1
2+2
blah
pi
exp(2)
mean(c(4,10,16))
> sqrt(c(5,6))
sqrt(c(5,6))
var(c(4,10,16))
sum(4,10,16)
sum(c(4,10,16))
median(1,2,3)
median(1,2,3)
median(c(1,2,3))
x <- pi
print(x)
x
objects()
y = pi
objects
x <- pi
print(x)
x
y = pi
objects()
x <- c(4,10,16)
x
print(x)
max(x)
min(x)
length(x)
sumary(x)
summary(x)
#2
y=c(-1,5,0)
#2
y=c(-1,5,0)
x
y
x+y
#2
y=c(-1,5,0)
x
y
x <- c(4,10,16)
x
y
x+y
-y
x+2
abs(y)
x*y
1:3
1:3
1:10
-(1:5)
w <- c(TRUE,FALSE,FALSE)
sum(w)
w <- c(TRUE,FALSE,FALSE,TRUE)
sum(w)
any(w)
w <- c(TRUE,FALSE,FALSE,TRUE)
sum(w)
any(w)
w <- c(FALSE,FALSE)
sum(w)
any(w)
ALL(x)
all(x)
all(w)
w <- c(TRUE,FALSE,FALSE)
sum(w)
any(w)
all(w)
!w
!w
(TRUE)&(FALSE)
(TRUE)|(FALSE)
(TRUE)|(FALSE)
(TRUE)|(TRUE)
(FALSE)|(FALSE)
(TRUE)|(TRUE)
TRUE
log(inf)
log(Inf)
1/0
-1/0
0/0
max(c(0/0, 1, 10))
max(c(NA, 1, 10))
max(c(NA, 1, 10), na.rm = TRUE)  # donne 10
v1 <- 5:23
v1
v2 <- seq(from = 6, to = 24, by =2 )
v2
v3 <- seq(0,1,length.out = 100)
v3
v3 <- seq(0,1,100)
v3
v3 <- seq(0,1,100)
v3
v3 <- seq(0,1,length.out = 100)
v3
v4 <- rep(1:5, times = 4)
v4
v4b <- 1:5
v4b <- v4b*4
v4b
x[1]
x
x[2]
x[0]
x
x[c[(1,2,2)]]
x[c[(1,2,2)]]
x[c(1,2,3)]]
x[c(1,2,3)]
x[c(1,,3)]
source("~/.active-rstudio-document", echo=TRUE)
x[c(1:3)]
x[1:3]
x[c(2,2,1,3)]
x[-1]
x
x[-1]
x[-c(1,2)]
x[-(1:2)]
object()
objects()
vec1<-c(3,NA,4)
vect1
vec1
object.size()
objects()
vec2<-c(FALSE,TRUE,FALSE)
objects(pattern=‘vec*’)
vec2<-c(FALSE,TRUE,FALSE)
objects(pattern=‘vec*’)
objects(pattern=‘vec’)
objects(pattern="vec*")
objects(pattern="vec")
objects(pattern="vec")
vec2
vec1
vec1[vec2]
is.na(vec1)
vec1
is.na(vec1)
is.na(vec2)
is.TRUE(vec2)
is.true(vec2)
na
is.na(vec2)
is.ture(vec2)
is.true(vec2)
isTRUE()
z=c(’iut’,’fds’)
z=c("iut","fds")
z
z[1]
paste('m',1:3)
paste(1:3)
paste('m',1:3,sep='')
paste('m',1:3)
paste('m',1:3,sep='')
paste('m',1:3)
paste(1:3)
paste('m',1:3,sep='')
c(paste('m',1:3,sep=''),paste('p',1:4,sep='.'),z)
##3
##3
don1
don1 <- read_ods("tab1.ods")
getwd()
usethis::create_package(pktest)
#Créer un package
install.packages("usethis")   # Une seule fois
library(usethis)              # À chaque nouvelle session
usethis::create_package("pktest")  # Crée le dossier et la structure du package
library(shiny); runApp('Matrice8x8.R')
runApp('Matrice8x8.R')
install.packages("shinyjs")
runApp('Matrice8x8.R')
showModal(modalDialog("Bravo ! Grille correcte 🎉", easyClose = TRUE))
runApp('Matrice8x8.R')
setwd("~/Desktop/FAC/S8/Programmation R")
setwd("~/Desktop/FAC/S8/Programmation R/EXERCICE")
ui <- fluidPage(
h1("Bjr Shiny")
)
shinyApp(ui = ui, server = )
source("~/.active-rstudio-document", echo=TRUE)
shinyApp(ui = ui, server =server )
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
runApp('~/Desktop/FAC/S8/Programmation R/Takuzu/Matrice8x8.R')
states <- c("", "0", "1")
state <- reactiveValues(values = matrix(rep("", total_buttons), nrow = nRows, ncol = nCols))
runApp('~/Desktop/FAC/S8/Programmation R/Takuzu/Matrice8x8.R')
source("~/.active-rstudio-document", echo=TRUE)
print(iris)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
output$matrice_boutons <- renderUI({
nRows <- 5    # Définir le nombre de lignes
nCols <- 5    # Définir le nombre de colonnes
# Créer une matrice de boutons
boutons <- lapply(1:(nRows * nCols), function(i) {
actionButton(inputId = paste("bouton", i, sep = "_"), label = paste("Bouton", i))
})
# Organiser les boutons en grille
tagList(div(class = "btn-grid",
lapply(split(boutons, ceiling(seq_along(boutons) / nCols)), div, class = "button-row")))
})
shinyApp(ui = ui, server = server)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
mtcars
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
library(ggplot2)
colors <- c(
"red", "blue", "green", "yellow", "orange",
"purple", "pink", "black", "white", "grey"
)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
install.packages("DT")
colors <- c(
"red", "blue", "green", "yellow", "orange",
"purple", "pink", "black", "white", "grey"
)
titanic_df <- as.data.frame(Titanic)
source("~/.active-rstudio-document", echo=TRUE)
titanic_df
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
titanic_df
names(titanic_df)
source("~/.active-rstudio-document", echo=TRUE)
install.packages(c("devtools", "usethis", "roxygen2", "lintr"))
setwd("~/Desktop/FAC/S8/Programmation R")
usethis::create_package("monpackage")
getwd()
source("~/Desktop/FAC/S8/Programmation R/monpackage/R/hello.R", echo=TRUE)
source("~/Desktop/FAC/S8/Programmation R/monpackage/R/hello.R", echo=TRUE)
data <- data.frame(mpg)
library(dplyr)
data <- data.frame(mpg)
library(dplyr)
source("~/.active-rstudio-document", echo=TRUE)
print(mpg)
View(mpg)
library(ggplot2)
View(mpg)
str(mpg)
m <- mpg
View(m)
mpg %>%
filter(fl != "d") %>%
group_by(trans) %>%
summarise(mean_hwy = mean(hwy, na.rm = TRUE))
flights
m <- flights
library(nycflights13)
install.packages("nycflights13")
library(nycflights13)
m <- flights
View(m)
inner_join(airlines, flights, by = "carrier") %>% filter(year == 2013, origin=="JFK", dest =="LAX") %>% group_by(name) %>% count()
mpg %>%
mutate(efficiency = hwy / displ) %>%
mpg %>%
mutate(efficiency = hwy / displ) %>%
slice_max(efficiency, n = 1, by = "manufacturer")%>%
select(manufacturer, model, efficiency)
mpg %>%
mutate(efficiency = hwy / displ) %>%
slice_max(efficiency, n = 1, by = "manufacturer" )%>%
select(manufacturer, model, efficiency)
ggplot(mpg, aes(x = cty, y = hwy, color = class)) + geom_point() + geom_smooth(method = "lm", color = "blue") +
labs(
title = "City vs. Highway MPG",
x = "City MPG",
y = "Highway MPG",
color = "Car Class"
)
source("~/.active-rstudio-document", echo=TRUE)
